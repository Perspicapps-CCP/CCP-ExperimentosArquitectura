/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 205.0, "minX": 0.0, "maxY": 2228.0, "series": [{"data": [[0.0, 205.0], [0.1, 209.0], [0.2, 210.0], [0.3, 210.0], [0.4, 211.0], [0.5, 211.0], [0.6, 212.0], [0.7, 212.0], [0.8, 213.0], [0.9, 213.0], [1.0, 213.0], [1.1, 214.0], [1.2, 214.0], [1.3, 214.0], [1.4, 214.0], [1.5, 214.0], [1.6, 214.0], [1.7, 215.0], [1.8, 215.0], [1.9, 215.0], [2.0, 215.0], [2.1, 215.0], [2.2, 215.0], [2.3, 215.0], [2.4, 216.0], [2.5, 216.0], [2.6, 216.0], [2.7, 216.0], [2.8, 216.0], [2.9, 216.0], [3.0, 217.0], [3.1, 217.0], [3.2, 217.0], [3.3, 217.0], [3.4, 217.0], [3.5, 217.0], [3.6, 218.0], [3.7, 218.0], [3.8, 218.0], [3.9, 218.0], [4.0, 218.0], [4.1, 218.0], [4.2, 219.0], [4.3, 219.0], [4.4, 219.0], [4.5, 219.0], [4.6, 219.0], [4.7, 219.0], [4.8, 219.0], [4.9, 220.0], [5.0, 220.0], [5.1, 220.0], [5.2, 220.0], [5.3, 220.0], [5.4, 220.0], [5.5, 220.0], [5.6, 221.0], [5.7, 221.0], [5.8, 221.0], [5.9, 221.0], [6.0, 221.0], [6.1, 221.0], [6.2, 221.0], [6.3, 221.0], [6.4, 222.0], [6.5, 222.0], [6.6, 222.0], [6.7, 222.0], [6.8, 222.0], [6.9, 222.0], [7.0, 222.0], [7.1, 223.0], [7.2, 223.0], [7.3, 223.0], [7.4, 223.0], [7.5, 223.0], [7.6, 223.0], [7.7, 224.0], [7.8, 224.0], [7.9, 224.0], [8.0, 224.0], [8.1, 224.0], [8.2, 224.0], [8.3, 225.0], [8.4, 225.0], [8.5, 225.0], [8.6, 225.0], [8.7, 225.0], [8.8, 225.0], [8.9, 226.0], [9.0, 226.0], [9.1, 226.0], [9.2, 226.0], [9.3, 227.0], [9.4, 227.0], [9.5, 227.0], [9.6, 227.0], [9.7, 227.0], [9.8, 227.0], [9.9, 228.0], [10.0, 228.0], [10.1, 228.0], [10.2, 228.0], [10.3, 228.0], [10.4, 228.0], [10.5, 229.0], [10.6, 229.0], [10.7, 229.0], [10.8, 229.0], [10.9, 229.0], [11.0, 229.0], [11.1, 230.0], [11.2, 230.0], [11.3, 230.0], [11.4, 231.0], [11.5, 231.0], [11.6, 231.0], [11.7, 231.0], [11.8, 231.0], [11.9, 231.0], [12.0, 232.0], [12.1, 232.0], [12.2, 232.0], [12.3, 232.0], [12.4, 232.0], [12.5, 233.0], [12.6, 233.0], [12.7, 233.0], [12.8, 233.0], [12.9, 233.0], [13.0, 233.0], [13.1, 233.0], [13.2, 234.0], [13.3, 234.0], [13.4, 234.0], [13.5, 234.0], [13.6, 235.0], [13.7, 235.0], [13.8, 235.0], [13.9, 235.0], [14.0, 235.0], [14.1, 235.0], [14.2, 236.0], [14.3, 236.0], [14.4, 236.0], [14.5, 236.0], [14.6, 236.0], [14.7, 236.0], [14.8, 237.0], [14.9, 237.0], [15.0, 237.0], [15.1, 237.0], [15.2, 238.0], [15.3, 238.0], [15.4, 238.0], [15.5, 238.0], [15.6, 238.0], [15.7, 238.0], [15.8, 239.0], [15.9, 239.0], [16.0, 239.0], [16.1, 239.0], [16.2, 239.0], [16.3, 240.0], [16.4, 240.0], [16.5, 240.0], [16.6, 240.0], [16.7, 240.0], [16.8, 241.0], [16.9, 241.0], [17.0, 241.0], [17.1, 241.0], [17.2, 241.0], [17.3, 241.0], [17.4, 242.0], [17.5, 242.0], [17.6, 242.0], [17.7, 242.0], [17.8, 242.0], [17.9, 243.0], [18.0, 243.0], [18.1, 243.0], [18.2, 243.0], [18.3, 243.0], [18.4, 244.0], [18.5, 244.0], [18.6, 244.0], [18.7, 244.0], [18.8, 244.0], [18.9, 245.0], [19.0, 245.0], [19.1, 245.0], [19.2, 245.0], [19.3, 245.0], [19.4, 246.0], [19.5, 246.0], [19.6, 246.0], [19.7, 246.0], [19.8, 247.0], [19.9, 247.0], [20.0, 247.0], [20.1, 247.0], [20.2, 248.0], [20.3, 248.0], [20.4, 248.0], [20.5, 248.0], [20.6, 248.0], [20.7, 248.0], [20.8, 249.0], [20.9, 249.0], [21.0, 249.0], [21.1, 249.0], [21.2, 250.0], [21.3, 250.0], [21.4, 250.0], [21.5, 251.0], [21.6, 251.0], [21.7, 251.0], [21.8, 252.0], [21.9, 252.0], [22.0, 252.0], [22.1, 253.0], [22.2, 253.0], [22.3, 254.0], [22.4, 254.0], [22.5, 254.0], [22.6, 254.0], [22.7, 255.0], [22.8, 255.0], [22.9, 255.0], [23.0, 255.0], [23.1, 255.0], [23.2, 256.0], [23.3, 256.0], [23.4, 256.0], [23.5, 257.0], [23.6, 257.0], [23.7, 257.0], [23.8, 257.0], [23.9, 258.0], [24.0, 258.0], [24.1, 258.0], [24.2, 259.0], [24.3, 259.0], [24.4, 260.0], [24.5, 260.0], [24.6, 260.0], [24.7, 261.0], [24.8, 261.0], [24.9, 262.0], [25.0, 262.0], [25.1, 262.0], [25.2, 263.0], [25.3, 263.0], [25.4, 263.0], [25.5, 264.0], [25.6, 264.0], [25.7, 264.0], [25.8, 264.0], [25.9, 265.0], [26.0, 265.0], [26.1, 265.0], [26.2, 265.0], [26.3, 266.0], [26.4, 266.0], [26.5, 266.0], [26.6, 267.0], [26.7, 267.0], [26.8, 268.0], [26.9, 269.0], [27.0, 269.0], [27.1, 270.0], [27.2, 270.0], [27.3, 271.0], [27.4, 271.0], [27.5, 272.0], [27.6, 272.0], [27.7, 273.0], [27.8, 273.0], [27.9, 274.0], [28.0, 275.0], [28.1, 275.0], [28.2, 276.0], [28.3, 276.0], [28.4, 277.0], [28.5, 277.0], [28.6, 278.0], [28.7, 279.0], [28.8, 279.0], [28.9, 280.0], [29.0, 281.0], [29.1, 282.0], [29.2, 283.0], [29.3, 283.0], [29.4, 284.0], [29.5, 284.0], [29.6, 286.0], [29.7, 287.0], [29.8, 287.0], [29.9, 288.0], [30.0, 289.0], [30.1, 290.0], [30.2, 291.0], [30.3, 292.0], [30.4, 293.0], [30.5, 293.0], [30.6, 294.0], [30.7, 295.0], [30.8, 296.0], [30.9, 298.0], [31.0, 299.0], [31.1, 301.0], [31.2, 302.0], [31.3, 304.0], [31.4, 305.0], [31.5, 307.0], [31.6, 307.0], [31.7, 309.0], [31.8, 310.0], [31.9, 311.0], [32.0, 313.0], [32.1, 315.0], [32.2, 316.0], [32.3, 317.0], [32.4, 319.0], [32.5, 320.0], [32.6, 322.0], [32.7, 324.0], [32.8, 325.0], [32.9, 326.0], [33.0, 327.0], [33.1, 329.0], [33.2, 330.0], [33.3, 331.0], [33.4, 333.0], [33.5, 335.0], [33.6, 337.0], [33.7, 339.0], [33.8, 342.0], [33.9, 345.0], [34.0, 347.0], [34.1, 350.0], [34.2, 352.0], [34.3, 355.0], [34.4, 357.0], [34.5, 362.0], [34.6, 367.0], [34.7, 371.0], [34.8, 373.0], [34.9, 379.0], [35.0, 383.0], [35.1, 385.0], [35.2, 388.0], [35.3, 396.0], [35.4, 407.0], [35.5, 418.0], [35.6, 429.0], [35.7, 436.0], [35.8, 464.0], [35.9, 549.0], [36.0, 650.0], [36.1, 767.0], [36.2, 1206.0], [36.3, 1207.0], [36.4, 1208.0], [36.5, 1208.0], [36.6, 1209.0], [36.7, 1209.0], [36.8, 1209.0], [36.9, 1210.0], [37.0, 1210.0], [37.1, 1210.0], [37.2, 1210.0], [37.3, 1210.0], [37.4, 1211.0], [37.5, 1211.0], [37.6, 1211.0], [37.7, 1211.0], [37.8, 1211.0], [37.9, 1211.0], [38.0, 1211.0], [38.1, 1211.0], [38.2, 1212.0], [38.3, 1212.0], [38.4, 1212.0], [38.5, 1212.0], [38.6, 1212.0], [38.7, 1212.0], [38.8, 1212.0], [38.9, 1212.0], [39.0, 1212.0], [39.1, 1212.0], [39.2, 1213.0], [39.3, 1213.0], [39.4, 1213.0], [39.5, 1213.0], [39.6, 1213.0], [39.7, 1213.0], [39.8, 1213.0], [39.9, 1213.0], [40.0, 1213.0], [40.1, 1213.0], [40.2, 1213.0], [40.3, 1213.0], [40.4, 1213.0], [40.5, 1214.0], [40.6, 1214.0], [40.7, 1214.0], [40.8, 1214.0], [40.9, 1214.0], [41.0, 1214.0], [41.1, 1214.0], [41.2, 1214.0], [41.3, 1214.0], [41.4, 1214.0], [41.5, 1214.0], [41.6, 1214.0], [41.7, 1214.0], [41.8, 1214.0], [41.9, 1214.0], [42.0, 1214.0], [42.1, 1214.0], [42.2, 1214.0], [42.3, 1215.0], [42.4, 1215.0], [42.5, 1215.0], [42.6, 1215.0], [42.7, 1215.0], [42.8, 1215.0], [42.9, 1215.0], [43.0, 1215.0], [43.1, 1215.0], [43.2, 1215.0], [43.3, 1215.0], [43.4, 1215.0], [43.5, 1215.0], [43.6, 1215.0], [43.7, 1215.0], [43.8, 1215.0], [43.9, 1215.0], [44.0, 1215.0], [44.1, 1215.0], [44.2, 1215.0], [44.3, 1216.0], [44.4, 1216.0], [44.5, 1216.0], [44.6, 1216.0], [44.7, 1216.0], [44.8, 1216.0], [44.9, 1216.0], [45.0, 1216.0], [45.1, 1216.0], [45.2, 1216.0], [45.3, 1216.0], [45.4, 1216.0], [45.5, 1216.0], [45.6, 1216.0], [45.7, 1216.0], [45.8, 1216.0], [45.9, 1216.0], [46.0, 1216.0], [46.1, 1216.0], [46.2, 1216.0], [46.3, 1216.0], [46.4, 1216.0], [46.5, 1217.0], [46.6, 1217.0], [46.7, 1217.0], [46.8, 1217.0], [46.9, 1217.0], [47.0, 1217.0], [47.1, 1217.0], [47.2, 1217.0], [47.3, 1217.0], [47.4, 1217.0], [47.5, 1217.0], [47.6, 1217.0], [47.7, 1217.0], [47.8, 1217.0], [47.9, 1217.0], [48.0, 1217.0], [48.1, 1217.0], [48.2, 1217.0], [48.3, 1217.0], [48.4, 1217.0], [48.5, 1218.0], [48.6, 1218.0], [48.7, 1218.0], [48.8, 1218.0], [48.9, 1218.0], [49.0, 1218.0], [49.1, 1218.0], [49.2, 1218.0], [49.3, 1218.0], [49.4, 1218.0], [49.5, 1218.0], [49.6, 1218.0], [49.7, 1218.0], [49.8, 1218.0], [49.9, 1218.0], [50.0, 1218.0], [50.1, 1218.0], [50.2, 1218.0], [50.3, 1218.0], [50.4, 1218.0], [50.5, 1218.0], [50.6, 1218.0], [50.7, 1218.0], [50.8, 1219.0], [50.9, 1219.0], [51.0, 1219.0], [51.1, 1219.0], [51.2, 1219.0], [51.3, 1219.0], [51.4, 1219.0], [51.5, 1219.0], [51.6, 1219.0], [51.7, 1219.0], [51.8, 1219.0], [51.9, 1219.0], [52.0, 1219.0], [52.1, 1219.0], [52.2, 1219.0], [52.3, 1219.0], [52.4, 1219.0], [52.5, 1219.0], [52.6, 1219.0], [52.7, 1219.0], [52.8, 1219.0], [52.9, 1219.0], [53.0, 1220.0], [53.1, 1220.0], [53.2, 1220.0], [53.3, 1220.0], [53.4, 1220.0], [53.5, 1220.0], [53.6, 1220.0], [53.7, 1220.0], [53.8, 1220.0], [53.9, 1220.0], [54.0, 1220.0], [54.1, 1220.0], [54.2, 1220.0], [54.3, 1220.0], [54.4, 1220.0], [54.5, 1220.0], [54.6, 1220.0], [54.7, 1220.0], [54.8, 1220.0], [54.9, 1220.0], [55.0, 1220.0], [55.1, 1220.0], [55.2, 1220.0], [55.3, 1220.0], [55.4, 1220.0], [55.5, 1220.0], [55.6, 1220.0], [55.7, 1221.0], [55.8, 1221.0], [55.9, 1221.0], [56.0, 1221.0], [56.1, 1221.0], [56.2, 1221.0], [56.3, 1221.0], [56.4, 1221.0], [56.5, 1221.0], [56.6, 1221.0], [56.7, 1221.0], [56.8, 1221.0], [56.9, 1221.0], [57.0, 1221.0], [57.1, 1221.0], [57.2, 1221.0], [57.3, 1221.0], [57.4, 1221.0], [57.5, 1221.0], [57.6, 1221.0], [57.7, 1221.0], [57.8, 1221.0], [57.9, 1221.0], [58.0, 1221.0], [58.1, 1221.0], [58.2, 1222.0], [58.3, 1222.0], [58.4, 1222.0], [58.5, 1222.0], [58.6, 1222.0], [58.7, 1222.0], [58.8, 1222.0], [58.9, 1222.0], [59.0, 1222.0], [59.1, 1222.0], [59.2, 1222.0], [59.3, 1222.0], [59.4, 1222.0], [59.5, 1222.0], [59.6, 1222.0], [59.7, 1222.0], [59.8, 1222.0], [59.9, 1222.0], [60.0, 1222.0], [60.1, 1222.0], [60.2, 1222.0], [60.3, 1222.0], [60.4, 1222.0], [60.5, 1223.0], [60.6, 1223.0], [60.7, 1223.0], [60.8, 1223.0], [60.9, 1223.0], [61.0, 1223.0], [61.1, 1223.0], [61.2, 1223.0], [61.3, 1223.0], [61.4, 1223.0], [61.5, 1223.0], [61.6, 1223.0], [61.7, 1223.0], [61.8, 1223.0], [61.9, 1223.0], [62.0, 1223.0], [62.1, 1223.0], [62.2, 1223.0], [62.3, 1223.0], [62.4, 1224.0], [62.5, 1224.0], [62.6, 1224.0], [62.7, 1224.0], [62.8, 1224.0], [62.9, 1224.0], [63.0, 1224.0], [63.1, 1224.0], [63.2, 1224.0], [63.3, 1224.0], [63.4, 1224.0], [63.5, 1224.0], [63.6, 1224.0], [63.7, 1224.0], [63.8, 1224.0], [63.9, 1224.0], [64.0, 1224.0], [64.1, 1224.0], [64.2, 1224.0], [64.3, 1225.0], [64.4, 1225.0], [64.5, 1225.0], [64.6, 1225.0], [64.7, 1225.0], [64.8, 1225.0], [64.9, 1225.0], [65.0, 1225.0], [65.1, 1225.0], [65.2, 1225.0], [65.3, 1225.0], [65.4, 1225.0], [65.5, 1225.0], [65.6, 1225.0], [65.7, 1225.0], [65.8, 1225.0], [65.9, 1225.0], [66.0, 1225.0], [66.1, 1225.0], [66.2, 1225.0], [66.3, 1226.0], [66.4, 1226.0], [66.5, 1226.0], [66.6, 1226.0], [66.7, 1226.0], [66.8, 1226.0], [66.9, 1226.0], [67.0, 1226.0], [67.1, 1226.0], [67.2, 1226.0], [67.3, 1226.0], [67.4, 1226.0], [67.5, 1226.0], [67.6, 1226.0], [67.7, 1226.0], [67.8, 1226.0], [67.9, 1226.0], [68.0, 1227.0], [68.1, 1227.0], [68.2, 1227.0], [68.3, 1227.0], [68.4, 1227.0], [68.5, 1227.0], [68.6, 1227.0], [68.7, 1227.0], [68.8, 1227.0], [68.9, 1227.0], [69.0, 1227.0], [69.1, 1227.0], [69.2, 1227.0], [69.3, 1227.0], [69.4, 1228.0], [69.5, 1228.0], [69.6, 1228.0], [69.7, 1228.0], [69.8, 1228.0], [69.9, 1228.0], [70.0, 1228.0], [70.1, 1228.0], [70.2, 1228.0], [70.3, 1228.0], [70.4, 1228.0], [70.5, 1228.0], [70.6, 1228.0], [70.7, 1228.0], [70.8, 1228.0], [70.9, 1228.0], [71.0, 1229.0], [71.1, 1229.0], [71.2, 1229.0], [71.3, 1229.0], [71.4, 1229.0], [71.5, 1229.0], [71.6, 1229.0], [71.7, 1229.0], [71.8, 1229.0], [71.9, 1229.0], [72.0, 1229.0], [72.1, 1229.0], [72.2, 1229.0], [72.3, 1229.0], [72.4, 1229.0], [72.5, 1229.0], [72.6, 1230.0], [72.7, 1230.0], [72.8, 1230.0], [72.9, 1230.0], [73.0, 1230.0], [73.1, 1230.0], [73.2, 1230.0], [73.3, 1230.0], [73.4, 1230.0], [73.5, 1230.0], [73.6, 1230.0], [73.7, 1230.0], [73.8, 1230.0], [73.9, 1230.0], [74.0, 1230.0], [74.1, 1230.0], [74.2, 1231.0], [74.3, 1231.0], [74.4, 1231.0], [74.5, 1231.0], [74.6, 1231.0], [74.7, 1231.0], [74.8, 1231.0], [74.9, 1231.0], [75.0, 1231.0], [75.1, 1231.0], [75.2, 1231.0], [75.3, 1231.0], [75.4, 1231.0], [75.5, 1231.0], [75.6, 1231.0], [75.7, 1231.0], [75.8, 1232.0], [75.9, 1232.0], [76.0, 1232.0], [76.1, 1232.0], [76.2, 1232.0], [76.3, 1232.0], [76.4, 1232.0], [76.5, 1232.0], [76.6, 1232.0], [76.7, 1232.0], [76.8, 1232.0], [76.9, 1232.0], [77.0, 1232.0], [77.1, 1233.0], [77.2, 1233.0], [77.3, 1233.0], [77.4, 1233.0], [77.5, 1233.0], [77.6, 1233.0], [77.7, 1233.0], [77.8, 1233.0], [77.9, 1233.0], [78.0, 1233.0], [78.1, 1233.0], [78.2, 1233.0], [78.3, 1234.0], [78.4, 1234.0], [78.5, 1234.0], [78.6, 1234.0], [78.7, 1234.0], [78.8, 1234.0], [78.9, 1234.0], [79.0, 1234.0], [79.1, 1234.0], [79.2, 1234.0], [79.3, 1234.0], [79.4, 1234.0], [79.5, 1234.0], [79.6, 1234.0], [79.7, 1234.0], [79.8, 1235.0], [79.9, 1235.0], [80.0, 1235.0], [80.1, 1235.0], [80.2, 1235.0], [80.3, 1235.0], [80.4, 1235.0], [80.5, 1235.0], [80.6, 1235.0], [80.7, 1235.0], [80.8, 1235.0], [80.9, 1236.0], [81.0, 1236.0], [81.1, 1236.0], [81.2, 1236.0], [81.3, 1236.0], [81.4, 1236.0], [81.5, 1236.0], [81.6, 1236.0], [81.7, 1236.0], [81.8, 1236.0], [81.9, 1236.0], [82.0, 1237.0], [82.1, 1237.0], [82.2, 1237.0], [82.3, 1237.0], [82.4, 1237.0], [82.5, 1237.0], [82.6, 1237.0], [82.7, 1237.0], [82.8, 1237.0], [82.9, 1237.0], [83.0, 1237.0], [83.1, 1238.0], [83.2, 1238.0], [83.3, 1238.0], [83.4, 1238.0], [83.5, 1238.0], [83.6, 1238.0], [83.7, 1238.0], [83.8, 1238.0], [83.9, 1239.0], [84.0, 1239.0], [84.1, 1239.0], [84.2, 1239.0], [84.3, 1239.0], [84.4, 1239.0], [84.5, 1239.0], [84.6, 1239.0], [84.7, 1239.0], [84.8, 1240.0], [84.9, 1240.0], [85.0, 1240.0], [85.1, 1240.0], [85.2, 1240.0], [85.3, 1240.0], [85.4, 1240.0], [85.5, 1240.0], [85.6, 1240.0], [85.7, 1241.0], [85.8, 1241.0], [85.9, 1241.0], [86.0, 1241.0], [86.1, 1241.0], [86.2, 1241.0], [86.3, 1241.0], [86.4, 1241.0], [86.5, 1241.0], [86.6, 1242.0], [86.7, 1242.0], [86.8, 1242.0], [86.9, 1242.0], [87.0, 1242.0], [87.1, 1242.0], [87.2, 1242.0], [87.3, 1243.0], [87.4, 1243.0], [87.5, 1243.0], [87.6, 1243.0], [87.7, 1243.0], [87.8, 1243.0], [87.9, 1243.0], [88.0, 1243.0], [88.1, 1244.0], [88.2, 1244.0], [88.3, 1244.0], [88.4, 1244.0], [88.5, 1244.0], [88.6, 1244.0], [88.7, 1244.0], [88.8, 1245.0], [88.9, 1245.0], [89.0, 1245.0], [89.1, 1245.0], [89.2, 1245.0], [89.3, 1246.0], [89.4, 1246.0], [89.5, 1246.0], [89.6, 1246.0], [89.7, 1246.0], [89.8, 1246.0], [89.9, 1246.0], [90.0, 1247.0], [90.1, 1247.0], [90.2, 1247.0], [90.3, 1247.0], [90.4, 1247.0], [90.5, 1247.0], [90.6, 1248.0], [90.7, 1248.0], [90.8, 1248.0], [90.9, 1248.0], [91.0, 1248.0], [91.1, 1248.0], [91.2, 1248.0], [91.3, 1249.0], [91.4, 1249.0], [91.5, 1249.0], [91.6, 1249.0], [91.7, 1249.0], [91.8, 1250.0], [91.9, 1250.0], [92.0, 1250.0], [92.1, 1250.0], [92.2, 1250.0], [92.3, 1251.0], [92.4, 1251.0], [92.5, 1251.0], [92.6, 1251.0], [92.7, 1251.0], [92.8, 1252.0], [92.9, 1252.0], [93.0, 1252.0], [93.1, 1253.0], [93.2, 1253.0], [93.3, 1253.0], [93.4, 1253.0], [93.5, 1254.0], [93.6, 1254.0], [93.7, 1254.0], [93.8, 1254.0], [93.9, 1255.0], [94.0, 1255.0], [94.1, 1255.0], [94.2, 1256.0], [94.3, 1256.0], [94.4, 1256.0], [94.5, 1257.0], [94.6, 1257.0], [94.7, 1257.0], [94.8, 1258.0], [94.9, 1258.0], [95.0, 1258.0], [95.1, 1259.0], [95.2, 1259.0], [95.3, 1259.0], [95.4, 1260.0], [95.5, 1260.0], [95.6, 1260.0], [95.7, 1261.0], [95.8, 1261.0], [95.9, 1261.0], [96.0, 1262.0], [96.1, 1262.0], [96.2, 1263.0], [96.3, 1263.0], [96.4, 1263.0], [96.5, 1264.0], [96.6, 1264.0], [96.7, 1265.0], [96.8, 1266.0], [96.9, 1266.0], [97.0, 1266.0], [97.1, 1267.0], [97.2, 1267.0], [97.3, 1269.0], [97.4, 1269.0], [97.5, 1270.0], [97.6, 1270.0], [97.7, 1271.0], [97.8, 1272.0], [97.9, 1273.0], [98.0, 1273.0], [98.1, 1274.0], [98.2, 1275.0], [98.3, 1276.0], [98.4, 1278.0], [98.5, 1279.0], [98.6, 1279.0], [98.7, 1281.0], [98.8, 1283.0], [98.9, 1284.0], [99.0, 1286.0], [99.1, 1287.0], [99.2, 1288.0], [99.3, 1290.0], [99.4, 1292.0], [99.5, 1295.0], [99.6, 1297.0], [99.7, 1298.0], [99.8, 1305.0], [99.9, 1328.0], [100.0, 2228.0]], "isOverall": false, "label": "Crear pedido", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 4447.0, "series": [{"data": [[2200.0, 1.0], [300.0, 303.0], [600.0, 5.0], [1200.0, 4447.0], [1300.0, 18.0], [700.0, 7.0], [200.0, 2169.0], [400.0, 35.0], [500.0, 8.0]], "isOverall": false, "label": "Crear pedido", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 1,000ms"], [1, "Requests having \nresponse time > 1,000ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4465.0, "series": [{"data": [[0.0, 2527.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 1,000ms", "isController": false}, {"data": [[1.0, 4465.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.0, "minX": 1.74133794E12, "maxY": 1000.0, "series": [{"data": [[1.74134136E12, 344.5], [1.74133956E12, 1000.0], [1.74133794E12, 60.64102564102562], [1.74134016E12, 1000.0], [1.74133836E12, 1000.0], [1.74133998E12, 1000.0], [1.74134058E12, 1000.0], [1.74133896E12, 1000.0], [1.74133878E12, 1000.0], [1.74134154E12, 48.0], [1.74133938E12, 1000.0], [1.74134094E12, 999.6000000000001], [1.74134112E12, 743.0], [1.7413398E12, 1000.0], [1.74133818E12, 1000.0], [1.7413404E12, 1000.0], [1.7413386E12, 1000.0], [1.74134022E12, 1000.0], [1.7413392E12, 1000.0], [1.74133902E12, 1000.0], [1.7413413E12, 444.5], [1.741338E12, 565.7553299492388], [1.74133962E12, 1000.0], [1.74134088E12, 1000.0], [1.74134004E12, 1000.0], [1.74133842E12, 1000.0], [1.74134064E12, 1000.0], [1.74134046E12, 1000.0], [1.74133884E12, 1000.0], [1.74134148E12, 147.0], [1.74133944E12, 1000.0], [1.74133926E12, 1000.0], [1.74134106E12, 842.1919191919192], [1.74133824E12, 1000.0], [1.74133986E12, 1000.0], [1.74133806E12, 1000.0], [1.74134028E12, 1000.0], [1.74133866E12, 1000.0], [1.7413407E12, 1000.0], [1.74133908E12, 1000.0], [1.74134124E12, 545.0], [1.74133968E12, 1000.0], [1.7413395E12, 1000.0], [1.74134082E12, 1000.0], [1.74133848E12, 1000.0], [1.7413401E12, 1000.0], [1.7413383E12, 1000.0], [1.74134052E12, 1000.0], [1.7413389E12, 1000.0], [1.74134142E12, 247.0], [1.74133932E12, 1000.0], [1.741341E12, 940.9134615384612], [1.74133992E12, 1000.0], [1.74133812E12, 1000.0], [1.74133974E12, 1000.0], [1.74134034E12, 1000.0], [1.74133872E12, 1000.0], [1.74133854E12, 1000.0], [1.74134076E12, 1000.0], [1.74133914E12, 1000.0], [1.74134118E12, 643.5]], "isOverall": false, "label": "1000 Crear pedidos normal", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74134154E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 211.0, "minX": 1.0, "maxY": 1282.0, "series": [{"data": [[2.0, 271.0], [3.0, 265.0], [4.0, 227.0], [5.0, 241.5], [6.0, 234.0], [7.0, 244.0], [8.0, 232.0], [9.0, 238.0], [10.0, 237.66666666666666], [11.0, 258.0], [12.0, 264.0], [13.0, 271.0], [14.0, 260.0], [15.0, 241.33333333333334], [16.0, 245.0], [17.0, 240.0], [18.0, 235.5], [19.0, 235.0], [20.0, 233.5], [21.0, 259.5], [22.0, 259.0], [23.0, 257.5], [24.0, 252.0], [25.0, 233.33333333333334], [26.0, 246.5], [27.0, 238.5], [28.0, 222.0], [29.0, 233.0], [30.0, 243.0], [31.0, 223.0], [33.0, 243.5], [32.0, 219.0], [34.0, 242.5], [35.0, 244.0], [36.0, 236.0], [37.0, 222.0], [38.0, 233.0], [39.0, 232.0], [40.0, 229.0], [41.0, 227.5], [42.0, 231.0], [43.0, 231.5], [44.0, 239.5], [45.0, 259.0], [46.0, 234.0], [47.0, 235.5], [48.0, 248.0], [49.0, 244.0], [50.0, 242.0], [51.0, 235.0], [52.0, 225.0], [53.0, 215.0], [54.0, 233.5], [55.0, 235.5], [56.0, 255.33333333333334], [57.0, 250.5], [58.0, 237.33333333333334], [59.0, 250.0], [60.0, 250.0], [61.0, 230.0], [62.0, 229.5], [63.0, 262.0], [65.0, 267.0], [67.0, 302.0], [66.0, 227.0], [64.0, 254.0], [68.0, 304.0], [69.0, 307.5], [70.0, 348.5], [71.0, 282.0], [72.0, 264.0], [73.0, 256.75], [74.0, 230.0], [75.0, 224.0], [76.0, 235.5], [77.0, 253.5], [78.0, 242.0], [79.0, 238.0], [81.0, 233.0], [82.0, 235.5], [83.0, 239.5], [80.0, 220.0], [84.0, 232.0], [85.0, 234.66666666666666], [86.0, 229.0], [87.0, 222.5], [88.0, 221.0], [89.0, 219.5], [90.0, 225.5], [91.0, 222.0], [92.0, 241.5], [93.0, 243.0], [94.0, 228.66666666666666], [95.0, 222.0], [96.0, 237.66666666666666], [98.0, 237.0], [99.0, 262.0], [97.0, 220.0], [100.0, 255.0], [101.0, 249.0], [103.0, 258.6666666666667], [102.0, 213.0], [104.0, 250.5], [105.0, 234.5], [106.0, 238.5], [107.0, 242.5], [108.0, 253.0], [109.0, 277.5], [110.0, 263.5], [111.0, 285.3333333333333], [112.0, 291.6666666666667], [113.0, 248.5], [114.0, 238.5], [115.0, 245.0], [116.0, 242.5], [117.0, 249.5], [118.0, 240.0], [119.0, 257.0], [121.0, 273.5], [122.0, 283.5], [123.0, 315.3333333333333], [120.0, 218.0], [124.0, 297.5], [125.0, 281.6666666666667], [126.0, 251.5], [127.0, 247.5], [128.0, 254.0], [129.0, 246.0], [130.0, 249.0], [131.0, 262.5], [132.0, 238.5], [133.0, 259.3333333333333], [134.0, 253.5], [135.0, 259.5], [137.0, 272.5], [138.0, 271.0], [139.0, 299.0], [141.0, 310.0], [143.0, 349.0], [142.0, 224.0], [140.0, 228.0], [136.0, 232.0], [145.0, 346.6666666666667], [146.0, 352.5], [147.0, 293.0], [148.0, 277.0], [149.0, 248.0], [150.0, 234.0], [151.0, 239.0], [144.0, 250.0], [153.0, 261.0], [155.0, 265.3333333333333], [156.0, 238.5], [157.0, 240.0], [159.0, 239.0], [158.0, 217.0], [154.0, 1249.0], [152.0, 226.0], [160.0, 243.0], [162.0, 233.5], [163.0, 231.0], [164.0, 247.0], [165.0, 245.0], [166.0, 264.5], [167.0, 246.0], [161.0, 240.0], [168.0, 245.5], [169.0, 248.5], [170.0, 236.5], [171.0, 234.33333333333334], [172.0, 233.5], [174.0, 241.5], [175.0, 231.0], [173.0, 233.0], [176.0, 246.5], [177.0, 246.0], [178.0, 244.5], [179.0, 242.66666666666666], [180.0, 228.0], [182.0, 233.5], [183.0, 217.0], [181.0, 230.0], [184.0, 272.5], [185.0, 272.5], [187.0, 309.5], [188.0, 323.0], [189.0, 294.5], [190.0, 362.6666666666667], [191.0, 334.5], [186.0, 222.0], [192.0, 338.3333333333333], [193.0, 296.0], [195.0, 255.0], [196.0, 234.5], [197.0, 233.5], [198.0, 242.0], [199.0, 248.66666666666666], [194.0, 234.0], [200.0, 237.5], [201.0, 262.5], [202.0, 251.0], [203.0, 255.5], [205.0, 275.0], [206.0, 269.3333333333333], [207.0, 256.5], [204.0, 215.0], [208.0, 245.0], [209.0, 234.66666666666666], [211.0, 242.5], [212.0, 256.5], [213.0, 237.5], [214.0, 229.5], [215.0, 247.5], [210.0, 247.0], [216.0, 240.66666666666666], [218.0, 245.5], [219.0, 244.0], [220.0, 241.66666666666666], [221.0, 234.0], [222.0, 236.66666666666666], [223.0, 234.5], [217.0, 255.0], [225.0, 226.5], [226.0, 250.5], [227.0, 240.0], [228.0, 226.5], [229.0, 243.0], [231.0, 279.5], [230.0, 258.0], [224.0, 217.0], [233.0, 316.5], [234.0, 356.6666666666667], [235.0, 306.5], [236.0, 296.5], [237.0, 314.3333333333333], [238.0, 276.3333333333333], [239.0, 248.0], [232.0, 216.0], [241.0, 262.5], [244.0, 333.25], [246.0, 290.75], [247.0, 258.0], [245.0, 224.0], [243.0, 214.0], [242.0, 223.0], [240.0, 214.0], [248.0, 740.5], [249.0, 249.5], [250.0, 252.5], [251.0, 240.0], [252.0, 242.0], [253.0, 249.33333333333334], [254.0, 236.5], [255.0, 234.33333333333334], [258.0, 235.0], [256.0, 246.5], [257.0, 242.0], [259.0, 244.0], [268.0, 241.5], [269.0, 228.0], [270.0, 229.0], [271.0, 231.0], [260.0, 250.5], [261.0, 233.5], [262.0, 234.5], [263.0, 236.0], [264.0, 246.66666666666666], [265.0, 234.66666666666666], [266.0, 235.0], [267.0, 227.5], [272.0, 222.0], [274.0, 235.0], [273.0, 222.0], [275.0, 250.0], [284.0, 227.0], [285.0, 250.0], [286.0, 256.0], [287.0, 265.5], [276.0, 281.25], [277.0, 263.3333333333333], [278.0, 248.5], [279.0, 231.5], [280.0, 237.0], [281.0, 237.0], [283.0, 245.5], [282.0, 215.0], [289.0, 733.0], [288.0, 268.0], [290.0, 255.5], [291.0, 240.0], [292.0, 250.0], [293.0, 230.5], [294.0, 231.5], [295.0, 236.5], [296.0, 237.0], [302.0, 244.5], [303.0, 240.0], [300.0, 229.0], [301.0, 234.5], [297.0, 249.0], [298.0, 247.0], [299.0, 243.5], [305.0, 248.0], [304.0, 245.5], [306.0, 253.0], [307.0, 262.5], [309.0, 276.0], [308.0, 232.0], [310.0, 320.5], [311.0, 299.5], [312.0, 277.6666666666667], [318.0, 246.0], [319.0, 242.0], [316.0, 266.0], [317.0, 261.0], [313.0, 257.5], [314.0, 276.5], [315.0, 243.0], [321.0, 294.5], [320.0, 764.5], [322.0, 312.3333333333333], [323.0, 271.25], [325.0, 239.0], [324.0, 221.0], [326.0, 232.5], [327.0, 242.5], [328.0, 255.5], [334.0, 266.0], [335.0, 245.0], [332.0, 235.5], [333.0, 251.0], [329.0, 252.5], [330.0, 738.0], [331.0, 249.0], [337.0, 231.66666666666666], [336.0, 242.5], [338.0, 247.5], [348.0, 219.0], [339.0, 255.0], [349.0, 243.0], [350.0, 238.0], [351.0, 572.0], [340.0, 234.0], [341.0, 244.0], [342.0, 258.5], [343.0, 268.3333333333333], [344.0, 239.5], [345.0, 227.0], [346.0, 230.0], [347.0, 228.0], [354.0, 749.5], [353.0, 248.0], [352.0, 228.0], [355.0, 231.5], [364.0, 220.0], [365.0, 239.0], [366.0, 567.6666666666667], [367.0, 231.0], [360.0, 230.0], [356.0, 242.5], [357.0, 246.5], [358.0, 238.5], [359.0, 238.66666666666666], [361.0, 734.0], [362.0, 238.0], [363.0, 495.75], [370.0, 746.5], [368.0, 244.0], [369.0, 214.0], [371.0, 241.0], [380.0, 231.0], [381.0, 240.0], [382.0, 236.0], [383.0, 241.5], [376.0, 228.0], [372.0, 234.0], [373.0, 243.5], [374.0, 250.0], [375.0, 278.6666666666667], [377.0, 290.5], [378.0, 270.3333333333333], [379.0, 241.5], [386.0, 245.5], [385.0, 251.0], [387.0, 249.5], [396.0, 1242.0], [397.0, 777.0], [398.0, 311.3333333333333], [399.0, 804.5], [388.0, 249.0], [389.0, 216.0], [390.0, 260.0], [391.0, 279.5], [384.0, 245.0], [392.0, 291.0], [393.0, 266.0], [394.0, 741.0], [395.0, 242.5], [401.0, 300.0], [400.0, 811.0], [402.0, 653.3333333333333], [403.0, 285.3333333333333], [404.0, 754.0], [405.0, 567.6666666666667], [406.0, 737.5], [407.0, 726.0], [409.0, 250.0], [412.0, 764.0], [413.0, 262.0], [414.0, 243.0], [415.0, 234.5], [408.0, 1238.0], [411.0, 603.3333333333333], [410.0, 244.0], [417.0, 754.0], [416.0, 232.5], [419.0, 279.75], [418.0, 212.0], [428.0, 240.0], [429.0, 251.0], [430.0, 237.5], [431.0, 239.0], [420.0, 571.6666666666667], [421.0, 231.0], [422.0, 224.0], [423.0, 225.0], [424.0, 255.5], [426.0, 241.66666666666666], [425.0, 254.0], [427.0, 216.0], [434.0, 232.0], [432.0, 233.0], [433.0, 238.0], [435.0, 225.0], [444.0, 253.5], [445.0, 254.0], [446.0, 250.5], [447.0, 259.0], [436.0, 224.5], [437.0, 247.0], [439.0, 242.5], [438.0, 230.0], [440.0, 248.5], [441.0, 244.5], [443.0, 248.0], [442.0, 220.0], [450.0, 285.0], [449.0, 293.0], [448.0, 249.0], [451.0, 302.0], [460.0, 268.0], [461.0, 281.5], [462.0, 264.0], [463.0, 245.33333333333334], [452.0, 278.0], [453.0, 300.0], [454.0, 275.0], [455.0, 268.6666666666667], [456.0, 240.5], [457.0, 233.66666666666666], [458.0, 241.5], [459.0, 252.5], [476.0, 328.5], [466.0, 233.66666666666666], [465.0, 235.5], [471.0, 233.0], [464.0, 233.0], [467.0, 242.0], [468.0, 243.0], [469.0, 253.0], [470.0, 255.0], [472.0, 290.5], [474.0, 305.0], [473.0, 223.0], [475.0, 306.5], [477.0, 356.0], [478.0, 366.0], [479.0, 312.5], [481.0, 296.0], [480.0, 296.0], [482.0, 321.0], [483.0, 315.5], [484.0, 290.5], [485.0, 295.5], [486.0, 336.25], [487.0, 222.0], [489.0, 345.6666666666667], [488.0, 219.0], [495.0, 221.0], [494.0, 226.0], [492.0, 252.0], [493.0, 258.5], [490.0, 300.75], [491.0, 249.0], [497.0, 335.25], [496.0, 794.5], [498.0, 316.5], [508.0, 243.0], [499.0, 223.0], [509.0, 272.0], [510.0, 255.5], [511.0, 252.0], [504.0, 220.0], [500.0, 257.3333333333333], [501.0, 249.0], [502.0, 253.5], [503.0, 258.0], [505.0, 268.5], [506.0, 288.0], [507.0, 305.25], [518.0, 236.0], [513.0, 233.5], [512.0, 228.5], [527.0, 242.5], [525.0, 243.5], [526.0, 231.5], [523.0, 275.3333333333333], [522.0, 238.0], [524.0, 243.5], [515.0, 233.5], [514.0, 214.0], [516.0, 247.5], [517.0, 251.0], [519.0, 235.5], [536.0, 216.0], [537.0, 232.0], [538.0, 231.5], [539.0, 579.0], [540.0, 236.5], [541.0, 733.0], [543.0, 592.6666666666667], [542.0, 216.0], [528.0, 261.3333333333333], [529.0, 244.5], [530.0, 257.0], [531.0, 259.0], [532.0, 243.0], [533.0, 742.5], [534.0, 242.5], [535.0, 235.0], [520.0, 241.0], [521.0, 247.5], [547.0, 240.5], [544.0, 245.5], [559.0, 236.5], [557.0, 750.5], [556.0, 232.0], [558.0, 234.0], [554.0, 238.66666666666666], [555.0, 231.0], [545.0, 252.0], [546.0, 253.5], [548.0, 744.0], [549.0, 236.5], [550.0, 254.0], [551.0, 271.3333333333333], [560.0, 243.0], [575.0, 281.0], [572.0, 273.3333333333333], [573.0, 259.0], [574.0, 292.6666666666667], [570.0, 288.0], [571.0, 267.5], [568.0, 286.0], [569.0, 283.5], [561.0, 235.5], [562.0, 253.33333333333334], [563.0, 243.0], [564.0, 247.5], [565.0, 220.0], [567.0, 306.3333333333333], [566.0, 224.0], [552.0, 279.0], [553.0, 267.3333333333333], [581.0, 227.0], [577.0, 276.3333333333333], [576.0, 286.5], [591.0, 234.0], [590.0, 214.0], [588.0, 234.0], [589.0, 726.5], [586.0, 239.0], [587.0, 245.0], [578.0, 250.0], [579.0, 230.5], [580.0, 231.33333333333334], [583.0, 253.0], [582.0, 280.0], [600.0, 234.0], [601.0, 240.0], [602.0, 249.0], [603.0, 259.5], [604.0, 252.0], [605.0, 267.5], [606.0, 290.6666666666667], [607.0, 264.0], [592.0, 238.5], [593.0, 263.0], [594.0, 258.6666666666667], [595.0, 236.0], [596.0, 234.0], [597.0, 227.0], [599.0, 246.0], [598.0, 222.0], [584.0, 241.5], [585.0, 247.5], [611.0, 733.5], [608.0, 237.5], [622.0, 247.0], [623.0, 241.66666666666666], [620.0, 241.0], [621.0, 243.0], [618.0, 615.0], [619.0, 244.0], [609.0, 247.0], [610.0, 740.0], [612.0, 253.0], [613.0, 250.5], [614.0, 250.0], [615.0, 244.5], [625.0, 226.0], [624.0, 259.0], [638.0, 275.0], [639.0, 230.0], [634.0, 228.5], [636.0, 217.0], [635.0, 223.0], [637.0, 265.5], [632.0, 567.3333333333333], [633.0, 230.0], [626.0, 231.5], [627.0, 260.0], [628.0, 252.0], [629.0, 233.0], [630.0, 242.0], [631.0, 220.0], [616.0, 261.5], [617.0, 280.6666666666667], [647.0, 253.66666666666666], [643.0, 347.5], [640.0, 805.5], [655.0, 270.6666666666667], [654.0, 235.0], [651.0, 286.25], [650.0, 232.0], [652.0, 218.0], [653.0, 594.6666666666667], [641.0, 355.5], [642.0, 393.3333333333333], [644.0, 330.0], [645.0, 351.0], [646.0, 323.3333333333333], [656.0, 233.0], [671.0, 222.0], [669.0, 238.5], [670.0, 747.5], [667.0, 227.0], [668.0, 235.0], [665.0, 235.5], [664.0, 216.0], [666.0, 240.5], [657.0, 236.5], [658.0, 736.0], [659.0, 258.0], [660.0, 742.5], [661.0, 247.0], [662.0, 233.0], [663.0, 241.33333333333334], [648.0, 763.5], [649.0, 255.0], [679.0, 232.33333333333334], [673.0, 567.3333333333333], [672.0, 725.5], [687.0, 234.5], [685.0, 242.5], [686.0, 233.5], [675.0, 236.0], [674.0, 1239.0], [676.0, 258.5], [678.0, 588.6666666666667], [677.0, 225.0], [688.0, 245.0], [703.0, 240.33333333333334], [702.0, 221.0], [699.0, 575.3333333333333], [698.0, 239.0], [700.0, 1236.0], [701.0, 238.66666666666666], [696.0, 234.5], [697.0, 571.0], [689.0, 249.5], [690.0, 241.5], [691.0, 756.0], [692.0, 234.0], [693.0, 254.0], [694.0, 240.5], [695.0, 240.0], [681.0, 730.0], [680.0, 236.0], [682.0, 254.0], [683.0, 233.0], [684.0, 229.0], [711.0, 242.0], [706.0, 235.33333333333334], [705.0, 247.0], [704.0, 225.0], [718.0, 264.0], [719.0, 247.0], [716.0, 262.5], [717.0, 281.5], [707.0, 237.5], [708.0, 224.0], [709.0, 233.0], [710.0, 231.0], [720.0, 233.0], [721.0, 217.0], [735.0, 291.0], [732.0, 761.0], [731.0, 229.0], [733.0, 1237.0], [734.0, 298.5], [728.0, 237.66666666666666], [729.0, 234.0], [730.0, 741.0], [722.0, 591.3333333333333], [723.0, 234.5], [724.0, 247.0], [725.0, 727.0], [726.0, 241.0], [727.0, 237.5], [712.0, 749.0], [713.0, 234.0], [714.0, 250.0], [715.0, 283.5], [739.0, 260.5], [736.0, 303.6666666666667], [750.0, 244.5], [751.0, 239.0], [748.0, 248.5], [749.0, 246.5], [746.0, 259.5], [747.0, 280.6666666666667], [737.0, 308.6666666666667], [738.0, 286.6666666666667], [740.0, 745.5], [741.0, 256.5], [742.0, 739.0], [743.0, 240.5], [752.0, 233.5], [767.0, 231.0], [764.0, 243.0], [765.0, 234.0], [766.0, 269.0], [762.0, 232.5], [763.0, 232.0], [760.0, 247.5], [761.0, 242.0], [753.0, 581.0], [755.0, 237.5], [754.0, 217.0], [756.0, 262.0], [757.0, 259.0], [758.0, 236.0], [759.0, 743.5], [744.0, 239.0], [745.0, 260.5], [772.0, 409.0], [779.0, 433.5], [768.0, 304.5], [769.0, 235.0], [771.0, 221.0], [770.0, 219.0], [782.0, 492.5], [783.0, 730.0], [774.0, 438.0], [773.0, 1228.0], [775.0, 460.5], [784.0, 364.5], [799.0, 1226.0], [797.0, 740.5], [798.0, 233.66666666666666], [795.0, 248.0], [796.0, 277.0], [793.0, 607.6666666666667], [792.0, 1282.0], [794.0, 736.0], [785.0, 421.5], [786.0, 428.0], [787.0, 344.0], [788.0, 318.0], [789.0, 297.3333333333333], [790.0, 264.0], [791.0, 603.3333333333333], [776.0, 494.0], [777.0, 473.0], [778.0, 606.5], [780.0, 486.0], [781.0, 797.0], [806.0, 286.5], [801.0, 233.0], [800.0, 236.5], [814.0, 279.0], [815.0, 221.0], [812.0, 517.0], [811.0, 226.0], [810.0, 211.0], [813.0, 278.5], [802.0, 761.0], [803.0, 290.5], [805.0, 585.25], [804.0, 217.0], [807.0, 321.6666666666667], [824.0, 602.6666666666667], [825.0, 243.5], [826.0, 576.0], [828.0, 729.0], [827.0, 1227.0], [829.0, 739.5], [830.0, 748.0], [831.0, 245.0], [816.0, 284.3333333333333], [817.0, 272.0], [818.0, 1257.0], [819.0, 625.0], [821.0, 274.0], [820.0, 1237.0], [823.0, 315.3333333333333], [822.0, 243.0], [808.0, 271.5], [809.0, 287.0], [838.0, 280.3333333333333], [834.0, 604.3333333333333], [832.0, 741.0], [833.0, 227.0], [847.0, 747.5], [845.0, 603.3333333333333], [846.0, 248.0], [842.0, 766.0], [843.0, 1277.0], [844.0, 785.0], [835.0, 265.0], [836.0, 255.0], [837.0, 286.5], [839.0, 740.5], [856.0, 238.0], [857.0, 273.5], [858.0, 271.0], [859.0, 283.6666666666667], [860.0, 636.6666666666667], [861.0, 276.6666666666667], [862.0, 251.5], [863.0, 241.0], [848.0, 590.0], [849.0, 749.0], [850.0, 236.5], [851.0, 241.66666666666666], [852.0, 228.0], [853.0, 239.5], [854.0, 262.5], [855.0, 260.0], [840.0, 238.0], [841.0, 247.5], [867.0, 255.5], [864.0, 251.0], [879.0, 250.0], [877.0, 234.5], [876.0, 1226.0], [878.0, 249.0], [874.0, 736.0], [875.0, 570.6666666666667], [865.0, 249.5], [866.0, 234.5], [868.0, 250.5], [869.0, 600.3333333333333], [870.0, 264.6666666666667], [871.0, 752.0], [880.0, 238.0], [895.0, 221.0], [893.0, 239.0], [894.0, 243.33333333333334], [891.0, 577.6666666666667], [890.0, 221.0], [892.0, 230.0], [888.0, 256.5], [889.0, 578.6666666666667], [881.0, 249.0], [882.0, 743.0], [883.0, 241.5], [884.0, 737.0], [885.0, 243.0], [886.0, 243.5], [887.0, 744.0], [872.0, 752.0], [873.0, 740.5], [903.0, 565.75], [897.0, 571.3333333333334], [896.0, 738.5], [911.0, 752.5], [909.0, 749.5], [910.0, 749.5], [899.0, 269.0], [898.0, 226.0], [900.0, 922.6666666666666], [901.0, 782.0], [902.0, 1231.0], [912.0, 259.5], [926.0, 342.5], [927.0, 353.3333333333333], [923.0, 298.0], [924.0, 216.0], [925.0, 339.5], [920.0, 770.5], [921.0, 236.0], [922.0, 815.0], [913.0, 590.6666666666667], [915.0, 261.6666666666667], [914.0, 1215.0], [916.0, 748.5], [917.0, 743.0], [918.0, 755.5], [919.0, 1221.0], [904.0, 293.5], [905.0, 273.6666666666667], [906.0, 244.66666666666666], [907.0, 1244.0], [908.0, 255.0], [934.0, 248.0], [930.0, 339.5], [928.0, 708.6666666666667], [929.0, 274.0], [942.0, 258.5], [941.0, 222.0], [943.0, 248.0], [938.0, 237.66666666666666], [939.0, 1223.0], [940.0, 484.75], [931.0, 620.6666666666667], [932.0, 248.0], [933.0, 751.0], [935.0, 754.0], [952.0, 778.0], [953.0, 781.5], [954.0, 772.5], [955.0, 773.5], [956.0, 276.0], [958.0, 517.25], [957.0, 1237.0], [959.0, 738.0], [944.0, 1226.0], [945.0, 639.3333333333333], [947.0, 317.3333333333333], [946.0, 1236.0], [948.0, 1243.0], [949.0, 674.0], [950.0, 647.6666666666667], [951.0, 779.5], [936.0, 268.75], [937.0, 745.0], [966.0, 239.0], [961.0, 233.0], [960.0, 244.5], [974.0, 773.0], [975.0, 779.5], [972.0, 784.0], [973.0, 791.0], [963.0, 233.5], [962.0, 225.0], [964.0, 236.5], [965.0, 232.66666666666666], [976.0, 779.0], [991.0, 586.0], [989.0, 757.0], [990.0, 753.5], [986.0, 750.5], [987.0, 1229.0], [988.0, 628.0], [984.0, 743.5], [967.0, 1230.0], [985.0, 746.5], [977.0, 784.0], [978.0, 772.0], [979.0, 777.5], [980.0, 534.25], [981.0, 768.5], [982.0, 756.5], [983.0, 751.5], [968.0, 582.3333333333334], [969.0, 773.0], [970.0, 765.5], [971.0, 779.5], [994.0, 760.5], [993.0, 771.0], [995.0, 776.5], [996.0, 934.6666666666666], [997.0, 278.0], [998.0, 272.0], [999.0, 267.0], [1000.0, 1107.7634101570484], [992.0, 1230.0], [1.0, 289.0]], "isOverall": false, "label": "Crear pedido", "isController": false}, {"data": [[851.6197626197652, 879.9818389818374]], "isOverall": false, "label": "Crear pedido-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 885.0833333333334, "minX": 1.74133794E12, "maxY": 11606.583333333334, "series": [{"data": [[1.74134136E12, 1154.7666666666667], [1.74133956E12, 1142.9833333333333], [1.74133794E12, 1378.65], [1.74134016E12, 1154.7666666666667], [1.74133836E12, 1142.9833333333333], [1.74133998E12, 1142.9833333333333], [1.74134058E12, 1142.9833333333333], [1.74133896E12, 1142.9833333333333], [1.74133878E12, 1166.55], [1.74134154E12, 1119.4166666666667], [1.74133938E12, 1131.2], [1.74134094E12, 1178.3333333333333], [1.74134112E12, 1190.1166666666666], [1.7413398E12, 1213.6833333333334], [1.74133818E12, 1142.9833333333333], [1.7413404E12, 1225.4666666666667], [1.7413386E12, 1213.6833333333334], [1.74134022E12, 1131.2], [1.7413392E12, 1225.4666666666667], [1.74133902E12, 1142.9833333333333], [1.7413413E12, 1201.9], [1.741338E12, 11606.583333333334], [1.74133962E12, 1142.9833333333333], [1.74134088E12, 1225.4666666666667], [1.74134004E12, 1190.1166666666666], [1.74133842E12, 1142.9833333333333], [1.74134064E12, 1190.1166666666666], [1.74134046E12, 1142.9833333333333], [1.74133884E12, 1166.55], [1.74134148E12, 1213.6833333333334], [1.74133944E12, 1190.1166666666666], [1.74133926E12, 1142.9833333333333], [1.74134106E12, 1166.55], [1.74133824E12, 1178.3333333333333], [1.74133986E12, 1154.7666666666667], [1.74133806E12, 1154.7666666666667], [1.74134028E12, 1225.4666666666667], [1.74133866E12, 1142.9833333333333], [1.7413407E12, 1190.1166666666666], [1.74133908E12, 1225.4666666666667], [1.74134124E12, 1166.55], [1.74133968E12, 1225.4666666666667], [1.7413395E12, 1190.1166666666666], [1.74134082E12, 1142.9833333333333], [1.74133848E12, 1225.4666666666667], [1.7413401E12, 1190.1166666666666], [1.7413383E12, 1190.1166666666666], [1.74134052E12, 1213.6833333333334], [1.7413389E12, 1190.1166666666666], [1.74134142E12, 1142.9833333333333], [1.74133932E12, 1225.4666666666667], [1.741341E12, 1225.4666666666667], [1.74133992E12, 1201.9], [1.74133812E12, 1190.1166666666666], [1.74133974E12, 1178.3333333333333], [1.74134034E12, 1166.55], [1.74133872E12, 1213.6833333333334], [1.74133854E12, 1178.3333333333333], [1.74134076E12, 1142.9833333333333], [1.74133914E12, 1166.55], [1.74134118E12, 1154.7666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74134136E12, 913.0333333333333], [1.74133956E12, 903.7166666666667], [1.74133794E12, 1090.05], [1.74134016E12, 913.0333333333333], [1.74133836E12, 903.7166666666667], [1.74133998E12, 903.7166666666667], [1.74134058E12, 903.7166666666667], [1.74133896E12, 903.7166666666667], [1.74133878E12, 922.35], [1.74134154E12, 885.0833333333334], [1.74133938E12, 894.4], [1.74134094E12, 931.6666666666666], [1.74134112E12, 940.9833333333333], [1.7413398E12, 959.6166666666667], [1.74133818E12, 903.7166666666667], [1.7413404E12, 968.9333333333333], [1.7413386E12, 959.6166666666667], [1.74134022E12, 894.4], [1.7413392E12, 968.9333333333333], [1.74133902E12, 903.7166666666667], [1.7413413E12, 950.3], [1.741338E12, 9176.916666666666], [1.74133962E12, 903.7166666666667], [1.74134088E12, 968.9333333333333], [1.74134004E12, 940.9833333333333], [1.74133842E12, 903.7166666666667], [1.74134064E12, 940.9833333333333], [1.74134046E12, 903.7166666666667], [1.74133884E12, 922.35], [1.74134148E12, 959.6166666666667], [1.74133944E12, 940.9833333333333], [1.74133926E12, 903.7166666666667], [1.74134106E12, 922.35], [1.74133824E12, 931.6666666666666], [1.74133986E12, 913.0333333333333], [1.74133806E12, 913.0333333333333], [1.74134028E12, 968.9333333333333], [1.74133866E12, 903.7166666666667], [1.7413407E12, 940.9833333333333], [1.74133908E12, 968.9333333333333], [1.74134124E12, 922.35], [1.74133968E12, 968.9333333333333], [1.7413395E12, 940.9833333333333], [1.74134082E12, 903.7166666666667], [1.74133848E12, 968.9333333333333], [1.7413401E12, 940.9833333333333], [1.7413383E12, 940.9833333333333], [1.74134052E12, 959.6166666666667], [1.7413389E12, 940.9833333333333], [1.74134142E12, 903.7166666666667], [1.74133932E12, 968.9333333333333], [1.741341E12, 968.9333333333333], [1.74133992E12, 950.3], [1.74133812E12, 940.9833333333333], [1.74133974E12, 931.6666666666666], [1.74134034E12, 922.35], [1.74133872E12, 959.6166666666667], [1.74133854E12, 931.6666666666666], [1.74134076E12, 903.7166666666667], [1.74133914E12, 922.35], [1.74134118E12, 913.0333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74134154E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 234.01052631578946, "minX": 1.74133794E12, "maxY": 1231.2884615384612, "series": [{"data": [[1.74134136E12, 314.55102040816314], [1.74133956E12, 1154.5670103092787], [1.74133794E12, 258.88888888888897], [1.74134016E12, 1217.7142857142858], [1.74133836E12, 1129.2164948453603], [1.74133998E12, 1114.1340206185564], [1.74134058E12, 1230.7010309278344], [1.74133896E12, 1187.4536082474233], [1.74133878E12, 1076.4444444444446], [1.74134154E12, 234.01052631578946], [1.74133938E12, 1163.0729166666667], [1.74134094E12, 1079.7899999999997], [1.74134112E12, 420.0297029702971], [1.7413398E12, 1133.3300970873793], [1.74133818E12, 254.80412371134025], [1.7413404E12, 1173.8557692307695], [1.7413386E12, 1230.407766990291], [1.74134022E12, 1112.875], [1.7413392E12, 1223.5673076923074], [1.74133902E12, 1187.7628865979384], [1.7413413E12, 377.7450980392157], [1.741338E12, 291.52487309644687], [1.74133962E12, 1094.8762886597938], [1.74134088E12, 1019.4999999999998], [1.74134004E12, 1172.475247524753], [1.74133842E12, 1165.381443298969], [1.74134064E12, 1226.5940594059407], [1.74134046E12, 1220.154639175258], [1.74133884E12, 1191.2626262626266], [1.74134148E12, 239.5631067961165], [1.74133944E12, 1230.3168316831682], [1.74133926E12, 1220.2164948453608], [1.74134106E12, 614.4444444444445], [1.74133824E12, 707.36], [1.74133986E12, 1187.4795918367342], [1.74133806E12, 261.54081632653055], [1.74134028E12, 1229.8461538461536], [1.74133866E12, 1221.5051546391753], [1.7413407E12, 1197.5742574257424], [1.74133908E12, 1031.423076923077], [1.74134124E12, 309.2222222222222], [1.74133968E12, 1231.2884615384612], [1.7413395E12, 1225.5346534653468], [1.74134082E12, 1218.59793814433], [1.74133848E12, 1152.7596153846152], [1.7413401E12, 1223.2871287128708], [1.7413383E12, 1186.5841584158413], [1.74134052E12, 1215.0485436893207], [1.7413389E12, 1207.029702970297], [1.74134142E12, 251.22680412371125], [1.74133932E12, 971.4711538461543], [1.741341E12, 855.1923076923077], [1.74133992E12, 1223.2352941176468], [1.74133812E12, 261.99009900990086], [1.74133974E12, 1188.6200000000003], [1.74134034E12, 1221.9595959595956], [1.74133872E12, 1210.8252427184464], [1.74133854E12, 1220.7400000000002], [1.74134076E12, 1177.2680412371133], [1.74133914E12, 1191.212121212122], [1.74134118E12, 391.17346938775506]], "isOverall": false, "label": "Crear pedido", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74134154E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 233.99999999999997, "minX": 1.74133794E12, "maxY": 1231.278846153846, "series": [{"data": [[1.74134136E12, 314.55102040816314], [1.74133956E12, 1154.5567010309283], [1.74133794E12, 258.88888888888897], [1.74134016E12, 1217.7142857142858], [1.74133836E12, 1129.2061855670097], [1.74133998E12, 1114.123711340206], [1.74134058E12, 1230.7010309278344], [1.74133896E12, 1187.4536082474233], [1.74133878E12, 1076.4444444444446], [1.74134154E12, 233.99999999999997], [1.74133938E12, 1163.0624999999995], [1.74134094E12, 1079.7700000000002], [1.74134112E12, 420.019801980198], [1.7413398E12, 1133.3009708737864], [1.74133818E12, 254.78350515463916], [1.7413404E12, 1173.8365384615379], [1.7413386E12, 1230.3980582524275], [1.74134022E12, 1112.875], [1.7413392E12, 1223.5673076923074], [1.74133902E12, 1187.7319587628865], [1.7413413E12, 377.735294117647], [1.741338E12, 291.5065989847717], [1.74133962E12, 1094.865979381444], [1.74134088E12, 1019.4903846153843], [1.74134004E12, 1172.4653465346541], [1.74133842E12, 1165.371134020619], [1.74134064E12, 1226.5742574257426], [1.74134046E12, 1220.154639175258], [1.74133884E12, 1191.2626262626266], [1.74134148E12, 239.5631067961165], [1.74133944E12, 1230.3069306930693], [1.74133926E12, 1220.1958762886602], [1.74134106E12, 614.4040404040403], [1.74133824E12, 707.36], [1.74133986E12, 1187.4693877551017], [1.74133806E12, 261.5102040816326], [1.74134028E12, 1229.8269230769233], [1.74133866E12, 1221.4536082474228], [1.7413407E12, 1197.5643564356435], [1.74133908E12, 1031.423076923077], [1.74134124E12, 309.2222222222222], [1.74133968E12, 1231.278846153846], [1.7413395E12, 1225.5247524752485], [1.74134082E12, 1218.5876288659797], [1.74133848E12, 1152.7307692307697], [1.7413401E12, 1223.2772277227718], [1.7413383E12, 1186.5742574257424], [1.74134052E12, 1215.0194174757287], [1.7413389E12, 1207.029702970297], [1.74134142E12, 251.2164948453607], [1.74133932E12, 971.4615384615383], [1.741341E12, 855.1730769230769], [1.74133992E12, 1223.2156862745094], [1.74133812E12, 261.9702970297029], [1.74133974E12, 1188.6100000000004], [1.74134034E12, 1221.9393939393938], [1.74133872E12, 1210.8058252427184], [1.74133854E12, 1220.7400000000002], [1.74134076E12, 1177.2474226804122], [1.74133914E12, 1191.212121212122], [1.74134118E12, 391.1632653061224]], "isOverall": false, "label": "Crear pedido", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74134154E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.1578947368421035, "minX": 1.74133794E12, "maxY": 1008.8247422680414, "series": [{"data": [[1.74134136E12, 89.17346938775509], [1.74133956E12, 936.5051546391755], [1.74133794E12, 7.452991452991451], [1.74134016E12, 998.4897959183672], [1.74133836E12, 906.5773195876287], [1.74133998E12, 895.2474226804125], [1.74134058E12, 1008.8247422680414], [1.74133896E12, 967.5257731958761], [1.74133878E12, 857.121212121212], [1.74134154E12, 7.1578947368421035], [1.74133938E12, 946.3958333333331], [1.74134094E12, 858.72], [1.74134112E12, 195.91089108910887], [1.7413398E12, 911.4757281553401], [1.74133818E12, 8.70103092783505], [1.7413404E12, 950.9519230769229], [1.7413386E12, 1008.5825242718445], [1.74134022E12, 893.8854166666666], [1.7413392E12, 998.8461538461537], [1.74133902E12, 967.3092783505157], [1.7413413E12, 154.5196078431372], [1.741338E12, 7.615228426395941], [1.74133962E12, 874.5257731958759], [1.74134088E12, 796.7596153846157], [1.74134004E12, 949.089108910891], [1.74133842E12, 946.7938144329898], [1.74134064E12, 998.7326732673267], [1.74134046E12, 998.2989690721648], [1.74133884E12, 957.838383838384], [1.74134148E12, 17.07766990291262], [1.74133944E12, 1008.6831683168316], [1.74133926E12, 998.5463917525774], [1.74134106E12, 391.8484848484847], [1.74133824E12, 478.34000000000015], [1.74133986E12, 967.887755102041], [1.74133806E12, 8.530612244897952], [1.74134028E12, 1008.6923076923081], [1.74133866E12, 998.5670103092785], [1.7413407E12, 969.2475247524751], [1.74133908E12, 806.5769230769231], [1.74134124E12, 88.39393939393943], [1.74133968E12, 1008.6153846153846], [1.7413395E12, 998.9009900990102], [1.74134082E12, 998.1546391752578], [1.74133848E12, 931.4711538461538], [1.7413401E12, 998.8217821782177], [1.7413383E12, 959.1980198019803], [1.74134052E12, 989.1650485436892], [1.7413389E12, 979.1980198019802], [1.74134142E12, 27.927835051546392], [1.74133932E12, 748.7211538461538], [1.741341E12, 633.0865384615386], [1.74133992E12, 998.6960784313725], [1.74133812E12, 8.504950495049506], [1.74133974E12, 968.6699999999997], [1.74134034E12, 998.7171717171716], [1.74133872E12, 989.4077669902913], [1.74133854E12, 998.6599999999997], [1.74134076E12, 957.2268041237111], [1.74133914E12, 968.2424242424244], [1.74134118E12, 170.92857142857144]], "isOverall": false, "label": "Crear pedido", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74134154E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 205.0, "minX": 1.74133794E12, "maxY": 2228.0, "series": [{"data": [[1.74134136E12, 1229.0], [1.74133956E12, 1265.0], [1.74133794E12, 423.0], [1.74134016E12, 1337.0], [1.74133836E12, 1287.0], [1.74133998E12, 1292.0], [1.74134058E12, 1279.0], [1.74133896E12, 1275.0], [1.74133878E12, 1254.0], [1.74134154E12, 307.0], [1.74133938E12, 1265.0], [1.74134094E12, 1303.0], [1.74134112E12, 1290.0], [1.7413398E12, 1268.0], [1.74133818E12, 370.0], [1.7413404E12, 1276.0], [1.7413386E12, 1286.0], [1.74134022E12, 1302.0], [1.7413392E12, 1281.0], [1.74133902E12, 1290.0], [1.7413413E12, 1242.0], [1.741338E12, 774.0], [1.74133962E12, 1297.0], [1.74134088E12, 1279.0], [1.74134004E12, 1357.0], [1.74133842E12, 1296.0], [1.74134064E12, 1308.0], [1.74134046E12, 1280.0], [1.74133884E12, 2228.0], [1.74134148E12, 1249.0], [1.74133944E12, 1285.0], [1.74133926E12, 1291.0], [1.74134106E12, 1277.0], [1.74133824E12, 1298.0], [1.74133986E12, 1269.0], [1.74133806E12, 370.0], [1.74134028E12, 1298.0], [1.74133866E12, 1281.0], [1.7413407E12, 1298.0], [1.74133908E12, 1281.0], [1.74134124E12, 1257.0], [1.74133968E12, 1309.0], [1.7413395E12, 1304.0], [1.74134082E12, 1295.0], [1.74133848E12, 1276.0], [1.7413401E12, 1293.0], [1.7413383E12, 1299.0], [1.74134052E12, 1297.0], [1.7413389E12, 1328.0], [1.74134142E12, 1226.0], [1.74133932E12, 1296.0], [1.741341E12, 1269.0], [1.74133992E12, 1398.0], [1.74133812E12, 355.0], [1.74133974E12, 1286.0], [1.74134034E12, 1305.0], [1.74133872E12, 1298.0], [1.74133854E12, 1336.0], [1.74134076E12, 1273.0], [1.74133914E12, 1293.0], [1.74134118E12, 1254.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74134136E12, 209.0], [1.74133956E12, 213.0], [1.74133794E12, 225.0], [1.74134016E12, 245.0], [1.74133836E12, 214.0], [1.74133998E12, 210.0], [1.74134058E12, 1212.0], [1.74133896E12, 208.0], [1.74133878E12, 211.0], [1.74134154E12, 208.0], [1.74133938E12, 211.0], [1.74134094E12, 218.0], [1.74134112E12, 213.0], [1.7413398E12, 210.0], [1.74133818E12, 213.0], [1.7413404E12, 210.0], [1.7413386E12, 1209.0], [1.74134022E12, 210.0], [1.7413392E12, 217.0], [1.74133902E12, 212.0], [1.7413413E12, 205.0], [1.741338E12, 227.0], [1.74133962E12, 206.0], [1.74134088E12, 213.0], [1.74134004E12, 210.0], [1.74133842E12, 209.0], [1.74134064E12, 213.0], [1.74134046E12, 221.0], [1.74133884E12, 215.0], [1.74134148E12, 211.0], [1.74133944E12, 1206.0], [1.74133926E12, 219.0], [1.74134106E12, 209.0], [1.74133824E12, 208.0], [1.74133986E12, 211.0], [1.74133806E12, 217.0], [1.74134028E12, 1211.0], [1.74133866E12, 235.0], [1.7413407E12, 221.0], [1.74133908E12, 210.0], [1.74134124E12, 211.0], [1.74133968E12, 1209.0], [1.7413395E12, 269.0], [1.74134082E12, 242.0], [1.74133848E12, 211.0], [1.7413401E12, 219.0], [1.7413383E12, 217.0], [1.74134052E12, 218.0], [1.7413389E12, 213.0], [1.74134142E12, 210.0], [1.74133932E12, 211.0], [1.741341E12, 212.0], [1.74133992E12, 221.0], [1.74133812E12, 214.0], [1.74133974E12, 214.0], [1.74134034E12, 222.0], [1.74133872E12, 211.0], [1.74133854E12, 214.0], [1.74134076E12, 215.0], [1.74133914E12, 214.0], [1.74134118E12, 211.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74134136E12, 285.20000000000016], [1.74133956E12, 1243.2], [1.74133794E12, 294.40000000000003], [1.74134016E12, 1244.5], [1.74133836E12, 1259.2], [1.74133998E12, 1245.2], [1.74134058E12, 1250.2], [1.74133896E12, 1250.4], [1.74133878E12, 1245.0], [1.74134154E12, 260.0], [1.74133938E12, 1244.0], [1.74134094E12, 1248.0], [1.74134112E12, 1232.4], [1.7413398E12, 1252.0], [1.74133818E12, 324.2], [1.7413404E12, 1254.5], [1.7413386E12, 1253.6], [1.74134022E12, 1246.3], [1.7413392E12, 1253.5], [1.74133902E12, 1249.4], [1.7413413E12, 1221.4], [1.741338E12, 370.4], [1.74133962E12, 1245.4], [1.74134088E12, 1259.0], [1.74134004E12, 1261.6], [1.74133842E12, 1244.4], [1.74134064E12, 1269.0], [1.74134046E12, 1252.2], [1.74133884E12, 1254.0], [1.74134148E12, 248.0], [1.74133944E12, 1257.2], [1.74133926E12, 1246.4], [1.74134106E12, 1237.0], [1.74133824E12, 1250.8], [1.74133986E12, 1250.0], [1.74133806E12, 322.1], [1.74134028E12, 1250.0], [1.74133866E12, 1254.0], [1.7413407E12, 1262.0], [1.74133908E12, 1260.0], [1.74134124E12, 265.0], [1.74133968E12, 1255.5], [1.7413395E12, 1265.6], [1.74134082E12, 1242.6], [1.74133848E12, 1253.0], [1.7413401E12, 1261.6], [1.7413383E12, 1263.0], [1.74134052E12, 1262.8], [1.7413389E12, 1273.4], [1.74134142E12, 258.0], [1.74133932E12, 1246.5], [1.741341E12, 1245.0], [1.74133992E12, 1253.7], [1.74133812E12, 328.4], [1.74133974E12, 1246.7], [1.74134034E12, 1258.0], [1.74133872E12, 1252.0], [1.74133854E12, 1255.9], [1.74134076E12, 1246.2], [1.74133914E12, 1255.0], [1.74134118E12, 1225.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74134136E12, 1229.0], [1.74133956E12, 1265.0], [1.74133794E12, 418.67999999999984], [1.74134016E12, 1337.0], [1.74133836E12, 1287.0], [1.74133998E12, 1292.0], [1.74134058E12, 1279.0], [1.74133896E12, 1275.0], [1.74133878E12, 1254.0], [1.74134154E12, 307.0], [1.74133938E12, 1265.0], [1.74134094E12, 1302.77], [1.74134112E12, 1289.8400000000001], [1.7413398E12, 1267.92], [1.74133818E12, 370.0], [1.7413404E12, 1275.9], [1.7413386E12, 1285.8799999999999], [1.74134022E12, 1302.0], [1.7413392E12, 1280.6], [1.74133902E12, 1290.0], [1.7413413E12, 1241.97], [1.741338E12, 650.8399999999999], [1.74133962E12, 1297.0], [1.74134088E12, 1278.7], [1.74134004E12, 1355.5800000000004], [1.74133842E12, 1296.0], [1.74134064E12, 1307.74], [1.74134046E12, 1280.0], [1.74133884E12, 2228.0], [1.74134148E12, 1210.399999999994], [1.74133944E12, 1284.98], [1.74133926E12, 1291.0], [1.74134106E12, 1277.0], [1.74133824E12, 1298.0], [1.74133986E12, 1269.0], [1.74133806E12, 370.0], [1.74134028E12, 1296.8500000000001], [1.74133866E12, 1281.0], [1.7413407E12, 1297.82], [1.74133908E12, 1280.85], [1.74134124E12, 1257.0], [1.74133968E12, 1308.05], [1.7413395E12, 1303.72], [1.74134082E12, 1295.0], [1.74133848E12, 1275.7], [1.7413401E12, 1292.98], [1.7413383E12, 1298.78], [1.74134052E12, 1296.8], [1.7413389E12, 1327.92], [1.74134142E12, 1226.0], [1.74133932E12, 1295.7], [1.741341E12, 1268.75], [1.74133992E12, 1397.4], [1.74133812E12, 354.92], [1.74133974E12, 1285.93], [1.74134034E12, 1305.0], [1.74133872E12, 1297.6], [1.74133854E12, 1335.5699999999997], [1.74134076E12, 1273.0], [1.74133914E12, 1293.0], [1.74134118E12, 1254.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74134136E12, 231.0], [1.74133956E12, 1221.0], [1.74133794E12, 248.0], [1.74134016E12, 1223.5], [1.74133836E12, 1227.0], [1.74133998E12, 1223.0], [1.74134058E12, 1226.0], [1.74133896E12, 1223.0], [1.74133878E12, 1223.0], [1.74134154E12, 227.0], [1.74133938E12, 1222.5], [1.74134094E12, 1222.0], [1.74134112E12, 231.0], [1.7413398E12, 1225.0], [1.74133818E12, 237.0], [1.7413404E12, 1228.0], [1.7413386E12, 1229.0], [1.74134022E12, 1222.0], [1.7413392E12, 1230.0], [1.74133902E12, 1225.0], [1.7413413E12, 230.5], [1.741338E12, 267.0], [1.74133962E12, 1222.0], [1.74134088E12, 1222.5], [1.74134004E12, 1225.0], [1.74133842E12, 1223.0], [1.74134064E12, 1230.0], [1.74134046E12, 1226.0], [1.74133884E12, 1228.0], [1.74134148E12, 226.0], [1.74133944E12, 1226.0], [1.74133926E12, 1229.0], [1.74134106E12, 247.0], [1.74133824E12, 296.5], [1.74133986E12, 1224.0], [1.74133806E12, 253.5], [1.74134028E12, 1225.5], [1.74133866E12, 1229.0], [1.7413407E12, 1233.0], [1.74133908E12, 1226.5], [1.74134124E12, 227.0], [1.74133968E12, 1226.0], [1.7413395E12, 1229.0], [1.74134082E12, 1224.0], [1.74133848E12, 1226.0], [1.7413401E12, 1229.0], [1.7413383E12, 1231.0], [1.74134052E12, 1229.0], [1.7413389E12, 1229.0], [1.74134142E12, 227.0], [1.74133932E12, 1221.0], [1.741341E12, 1220.5], [1.74133992E12, 1225.0], [1.74133812E12, 250.0], [1.74133974E12, 1224.0], [1.74134034E12, 1225.0], [1.74133872E12, 1226.0], [1.74133854E12, 1226.0], [1.74134076E12, 1224.0], [1.74133914E12, 1228.0], [1.74134118E12, 225.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74134136E12, 1219.15], [1.74133956E12, 1259.3], [1.74133794E12, 349.4999999999999], [1.74134016E12, 1257.25], [1.74133836E12, 1270.4], [1.74133998E12, 1252.7], [1.74134058E12, 1265.2], [1.74133896E12, 1256.1], [1.74133878E12, 1250.0], [1.74134154E12, 272.19999999999993], [1.74133938E12, 1250.15], [1.74134094E12, 1264.6], [1.74134112E12, 1246.0], [1.7413398E12, 1259.6], [1.74133818E12, 335.0], [1.7413404E12, 1260.5], [1.7413386E12, 1260.4], [1.74134022E12, 1265.3], [1.7413392E12, 1261.0], [1.74133902E12, 1262.7], [1.7413413E12, 1237.1], [1.741338E12, 410.69999999999993], [1.74133962E12, 1279.6], [1.74134088E12, 1265.75], [1.74134004E12, 1272.7], [1.74133842E12, 1251.3999999999999], [1.74134064E12, 1285.8], [1.74134046E12, 1259.2], [1.74133884E12, 1266.0], [1.74134148E12, 260.59999999999997], [1.74133944E12, 1265.9], [1.74133926E12, 1260.4], [1.74134106E12, 1249.0], [1.74133824E12, 1275.0], [1.74133986E12, 1260.05], [1.74133806E12, 333.05], [1.74134028E12, 1260.75], [1.74133866E12, 1263.4], [1.7413407E12, 1273.9], [1.74133908E12, 1266.75], [1.74134124E12, 1221.0], [1.74133968E12, 1263.75], [1.7413395E12, 1279.0], [1.74134082E12, 1272.1], [1.74133848E12, 1257.75], [1.7413401E12, 1272.7], [1.7413383E12, 1270.7], [1.74134052E12, 1286.2], [1.7413389E12, 1294.3999999999999], [1.74134142E12, 267.29999999999995], [1.74133932E12, 1261.0], [1.741341E12, 1249.75], [1.74133992E12, 1288.1], [1.74133812E12, 346.79999999999995], [1.74133974E12, 1255.0], [1.74134034E12, 1297.0], [1.74133872E12, 1268.6], [1.74133854E12, 1262.95], [1.74134076E12, 1251.1], [1.74133914E12, 1258.0], [1.74134118E12, 1237.1]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74134154E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 233.5, "minX": 1.0, "maxY": 1236.5, "series": [{"data": [[2.0, 1221.0], [9.0, 324.0], [10.0, 233.5], [3.0, 1225.0], [13.0, 676.0], [15.0, 363.0], [16.0, 242.0], [1.0, 1218.0], [4.0, 1228.0], [17.0, 256.0], [18.0, 264.0], [19.0, 283.0], [20.0, 276.5], [5.0, 1235.0], [21.0, 266.0], [6.0, 1230.5], [25.0, 383.0], [7.0, 1236.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 233.5, "minX": 1.0, "maxY": 1236.5, "series": [{"data": [[2.0, 1221.0], [9.0, 324.0], [10.0, 233.5], [3.0, 1225.0], [13.0, 676.0], [15.0, 363.0], [16.0, 242.0], [1.0, 1218.0], [4.0, 1228.0], [17.0, 256.0], [18.0, 264.0], [19.0, 283.0], [20.0, 276.5], [5.0, 1235.0], [21.0, 266.0], [6.0, 1230.5], [25.0, 383.0], [7.0, 1236.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.74133794E12, "maxY": 16.35, "series": [{"data": [[1.74134136E12, 1.6666666666666667], [1.74133956E12, 1.6666666666666667], [1.74133794E12, 2.0166666666666666], [1.74134016E12, 1.6666666666666667], [1.74133836E12, 1.6666666666666667], [1.74133998E12, 1.6333333333333333], [1.74134058E12, 1.6333333333333333], [1.74133896E12, 1.6666666666666667], [1.74133878E12, 1.6333333333333333], [1.74134154E12, 1.5833333333333333], [1.74133938E12, 1.6333333333333333], [1.74134094E12, 1.6666666666666667], [1.74134112E12, 1.6833333333333333], [1.7413398E12, 1.75], [1.74133818E12, 1.6333333333333333], [1.7413404E12, 1.75], [1.7413386E12, 1.75], [1.74134022E12, 1.6166666666666667], [1.7413392E12, 1.75], [1.74133902E12, 1.6], [1.7413413E12, 1.6833333333333333], [1.741338E12, 16.35], [1.74133962E12, 1.6166666666666667], [1.74134088E12, 1.6833333333333333], [1.74134004E12, 1.6666666666666667], [1.74133842E12, 1.6166666666666667], [1.74134064E12, 1.6666666666666667], [1.74134046E12, 1.6333333333333333], [1.74133884E12, 1.6666666666666667], [1.74134148E12, 1.6833333333333333], [1.74133944E12, 1.6666666666666667], [1.74133926E12, 1.6333333333333333], [1.74134106E12, 1.6333333333333333], [1.74133824E12, 1.6666666666666667], [1.74133986E12, 1.6333333333333333], [1.74133806E12, 1.6333333333333333], [1.74134028E12, 1.6833333333333333], [1.74133866E12, 1.6333333333333333], [1.7413407E12, 1.6833333333333333], [1.74133908E12, 1.7], [1.74134124E12, 1.6666666666666667], [1.74133968E12, 1.6833333333333333], [1.7413395E12, 1.6833333333333333], [1.74134082E12, 1.6166666666666667], [1.74133848E12, 1.6833333333333333], [1.7413401E12, 1.6833333333333333], [1.7413383E12, 1.6833333333333333], [1.74134052E12, 1.6833333333333333], [1.7413389E12, 1.6833333333333333], [1.74134142E12, 1.6166666666666667], [1.74133932E12, 1.6833333333333333], [1.741341E12, 1.7333333333333334], [1.74133992E12, 1.6833333333333333], [1.74133812E12, 1.6833333333333333], [1.74133974E12, 1.65], [1.74134034E12, 1.65], [1.74133872E12, 1.6833333333333333], [1.74133854E12, 1.65], [1.74134076E12, 1.6666666666666667], [1.74133914E12, 1.65], [1.74134118E12, 1.6333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74134154E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.74133794E12, "maxY": 16.416666666666668, "series": [{"data": [[1.74134136E12, 1.6333333333333333], [1.74133956E12, 1.6166666666666667], [1.74133794E12, 1.95], [1.74134016E12, 1.6333333333333333], [1.74133836E12, 1.6166666666666667], [1.74133998E12, 1.6166666666666667], [1.74134058E12, 1.6166666666666667], [1.74133896E12, 1.6166666666666667], [1.74133878E12, 1.65], [1.74134154E12, 1.5833333333333333], [1.74133938E12, 1.6], [1.74134094E12, 1.6666666666666667], [1.74134112E12, 1.6833333333333333], [1.7413398E12, 1.7166666666666666], [1.74133818E12, 1.6166666666666667], [1.7413404E12, 1.7333333333333334], [1.7413386E12, 1.7166666666666666], [1.74134022E12, 1.6], [1.7413392E12, 1.7333333333333334], [1.74133902E12, 1.6166666666666667], [1.7413413E12, 1.7], [1.741338E12, 16.416666666666668], [1.74133962E12, 1.6166666666666667], [1.74134088E12, 1.7333333333333334], [1.74134004E12, 1.6833333333333333], [1.74133842E12, 1.6166666666666667], [1.74134064E12, 1.6833333333333333], [1.74134046E12, 1.6166666666666667], [1.74133884E12, 1.65], [1.74134148E12, 1.7166666666666666], [1.74133944E12, 1.6833333333333333], [1.74133926E12, 1.6166666666666667], [1.74134106E12, 1.65], [1.74133824E12, 1.6666666666666667], [1.74133986E12, 1.6333333333333333], [1.74133806E12, 1.6333333333333333], [1.74134028E12, 1.7333333333333334], [1.74133866E12, 1.6166666666666667], [1.7413407E12, 1.6833333333333333], [1.74133908E12, 1.7333333333333334], [1.74134124E12, 1.65], [1.74133968E12, 1.7333333333333334], [1.7413395E12, 1.6833333333333333], [1.74134082E12, 1.6166666666666667], [1.74133848E12, 1.7333333333333334], [1.7413401E12, 1.6833333333333333], [1.7413383E12, 1.6833333333333333], [1.74134052E12, 1.7166666666666666], [1.7413389E12, 1.6833333333333333], [1.74134142E12, 1.6166666666666667], [1.74133932E12, 1.7333333333333334], [1.741341E12, 1.7333333333333334], [1.74133992E12, 1.7], [1.74133812E12, 1.6833333333333333], [1.74133974E12, 1.6666666666666667], [1.74134034E12, 1.65], [1.74133872E12, 1.7166666666666666], [1.74133854E12, 1.6666666666666667], [1.74134076E12, 1.6166666666666667], [1.74133914E12, 1.65], [1.74134118E12, 1.6333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74134154E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.74133794E12, "maxY": 16.416666666666668, "series": [{"data": [[1.74134136E12, 1.6333333333333333], [1.74133956E12, 1.6166666666666667], [1.74133794E12, 1.95], [1.74134016E12, 1.6333333333333333], [1.74133836E12, 1.6166666666666667], [1.74133998E12, 1.6166666666666667], [1.74134058E12, 1.6166666666666667], [1.74133896E12, 1.6166666666666667], [1.74133878E12, 1.65], [1.74134154E12, 1.5833333333333333], [1.74133938E12, 1.6], [1.74134094E12, 1.6666666666666667], [1.74134112E12, 1.6833333333333333], [1.7413398E12, 1.7166666666666666], [1.74133818E12, 1.6166666666666667], [1.7413404E12, 1.7333333333333334], [1.7413386E12, 1.7166666666666666], [1.74134022E12, 1.6], [1.7413392E12, 1.7333333333333334], [1.74133902E12, 1.6166666666666667], [1.7413413E12, 1.7], [1.741338E12, 16.416666666666668], [1.74133962E12, 1.6166666666666667], [1.74134088E12, 1.7333333333333334], [1.74134004E12, 1.6833333333333333], [1.74133842E12, 1.6166666666666667], [1.74134064E12, 1.6833333333333333], [1.74134046E12, 1.6166666666666667], [1.74133884E12, 1.65], [1.74134148E12, 1.7166666666666666], [1.74133944E12, 1.6833333333333333], [1.74133926E12, 1.6166666666666667], [1.74134106E12, 1.65], [1.74133824E12, 1.6666666666666667], [1.74133986E12, 1.6333333333333333], [1.74133806E12, 1.6333333333333333], [1.74134028E12, 1.7333333333333334], [1.74133866E12, 1.6166666666666667], [1.7413407E12, 1.6833333333333333], [1.74133908E12, 1.7333333333333334], [1.74134124E12, 1.65], [1.74133968E12, 1.7333333333333334], [1.7413395E12, 1.6833333333333333], [1.74134082E12, 1.6166666666666667], [1.74133848E12, 1.7333333333333334], [1.7413401E12, 1.6833333333333333], [1.7413383E12, 1.6833333333333333], [1.74134052E12, 1.7166666666666666], [1.7413389E12, 1.6833333333333333], [1.74134142E12, 1.6166666666666667], [1.74133932E12, 1.7333333333333334], [1.741341E12, 1.7333333333333334], [1.74133992E12, 1.7], [1.74133812E12, 1.6833333333333333], [1.74133974E12, 1.6666666666666667], [1.74134034E12, 1.65], [1.74133872E12, 1.7166666666666666], [1.74133854E12, 1.6666666666666667], [1.74134076E12, 1.6166666666666667], [1.74133914E12, 1.65], [1.74134118E12, 1.6333333333333333]], "isOverall": false, "label": "Crear pedido-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74134154E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.74133794E12, "maxY": 16.416666666666668, "series": [{"data": [[1.74134136E12, 1.6333333333333333], [1.74133956E12, 1.6166666666666667], [1.74133794E12, 1.95], [1.74134016E12, 1.6333333333333333], [1.74133836E12, 1.6166666666666667], [1.74133998E12, 1.6166666666666667], [1.74134058E12, 1.6166666666666667], [1.74133896E12, 1.6166666666666667], [1.74133878E12, 1.65], [1.74134154E12, 1.5833333333333333], [1.74133938E12, 1.6], [1.74134094E12, 1.6666666666666667], [1.74134112E12, 1.6833333333333333], [1.7413398E12, 1.7166666666666666], [1.74133818E12, 1.6166666666666667], [1.7413404E12, 1.7333333333333334], [1.7413386E12, 1.7166666666666666], [1.74134022E12, 1.6], [1.7413392E12, 1.7333333333333334], [1.74133902E12, 1.6166666666666667], [1.7413413E12, 1.7], [1.741338E12, 16.416666666666668], [1.74133962E12, 1.6166666666666667], [1.74134088E12, 1.7333333333333334], [1.74134004E12, 1.6833333333333333], [1.74133842E12, 1.6166666666666667], [1.74134064E12, 1.6833333333333333], [1.74134046E12, 1.6166666666666667], [1.74133884E12, 1.65], [1.74134148E12, 1.7166666666666666], [1.74133944E12, 1.6833333333333333], [1.74133926E12, 1.6166666666666667], [1.74134106E12, 1.65], [1.74133824E12, 1.6666666666666667], [1.74133986E12, 1.6333333333333333], [1.74133806E12, 1.6333333333333333], [1.74134028E12, 1.7333333333333334], [1.74133866E12, 1.6166666666666667], [1.7413407E12, 1.6833333333333333], [1.74133908E12, 1.7333333333333334], [1.74134124E12, 1.65], [1.74133968E12, 1.7333333333333334], [1.7413395E12, 1.6833333333333333], [1.74134082E12, 1.6166666666666667], [1.74133848E12, 1.7333333333333334], [1.7413401E12, 1.6833333333333333], [1.7413383E12, 1.6833333333333333], [1.74134052E12, 1.7166666666666666], [1.7413389E12, 1.6833333333333333], [1.74134142E12, 1.6166666666666667], [1.74133932E12, 1.7333333333333334], [1.741341E12, 1.7333333333333334], [1.74133992E12, 1.7], [1.74133812E12, 1.6833333333333333], [1.74133974E12, 1.6666666666666667], [1.74134034E12, 1.65], [1.74133872E12, 1.7166666666666666], [1.74133854E12, 1.6666666666666667], [1.74134076E12, 1.6166666666666667], [1.74133914E12, 1.65], [1.74134118E12, 1.6333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74134154E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

