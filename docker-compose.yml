version: '3.8'

services:

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    networks:
      - general
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
  ventas_api:
    build: ./ventas
    command: uvicorn main:app --host 0.0.0.0 --port 9001
    container_name: ventas_api
    ports:
      - "9001:9001"
    environment:
      DB_USER: ventas
      DB_PASSWORD: postgres
      DB_HOST: ventas_db
      DB_PORT: 5432
      DB_NAME: ventas_db
      BROKER_HOST: rabbitmq
      RESERVE_ITEMS_TOPIC: rpc_reserve_items
    depends_on:
      ventas_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - general
      - ventas_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9001/ventas/health || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 2
    restart: on-failure

  ventas_db:
    image: postgres:latest
    container_name: ventas_db
    volumes:
      - ventas_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ventas
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ventas_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ventas_net

  inventario_api:
    build: ./inventarios
    command: uvicorn src.main:app --host 0.0.0.0 --port 8001
    container_name: inventario_api
    ports:
      - "8001:8001"
    environment:
      DB_USER: inventario
      DB_PASSWORD: postgres
      DB_HOST: inventario_db
      DB_PORT: 5432
      DB_NAME: inventario_db
      BROKER_HOST: rabbitmq
      RESERVE_ITEMS_TOPIC: rpc_reserve_items
    depends_on:
      inventario_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - general
      - inventario_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8001/inventario/ping || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 2
    restart: on-failure

  inventario_db:
    image: postgres:latest
    container_name: inventario_db
    volumes:
      - inventario_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: inventario
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventario_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inventario_net

  logistica_api:
    build: ./logistica
    command: uvicorn main:app --host 0.0.0.0 --port 9003
    container_name: logistica_api
    ports:
      - "9003:9003"
    environment:
      DB_USER: logistica
      DB_PASSWORD: postgres
      DB_HOST: logistica_db
      DB_PORT: 5432
      DB_NAME: logistica_db
      BROKER_HOST: rabbitmq
      CREATE_DELIVERY_TOPIC: rpc_create_delivery
    depends_on:
      logistica_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - general
      - logistica_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9003/logistica/health || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 2
    restart: on-failure
  logistica_broker_consumer:
    build: ./logistica
    command: python -u start_broker_consumer.py
    container_name: logistica_broker_consumer
    environment:
      DB_USER: logistica
      DB_PASSWORD: postgres
      DB_HOST: logistica_db
      DB_PORT: 5432
      DB_NAME: logistica_db
      BROKER_HOST: rabbitmq
      CREATE_DELIVERY_TOPIC: rpc_create_delivery
    depends_on:
      logistica_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - general
      - logistica_net
  logistica_db:
    image: postgres:latest
    container_name: logistica_db
    volumes:
      - logistica_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: logistica
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: logistica_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logistica_net
  proveedores_api:
    build: ./fabricantes
    command: uvicorn main:app --host 0.0.0.0 --port 8002
    container_name: proveedores_api
    ports:
      - "8002:8002"
    environment:
      DB_USER: proveedores
      DB_PASSWORD: postgres
      DB_HOST: proveedores_db
      DB_PORT: 5432
      DB_NAME: proveedores_db
    depends_on:
      inventario_db:
        condition: service_healthy
    networks:
      - proveedores_net
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8002/manufacturer/ping || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 2
    restart: on-failure
  proveedores_db:
    image: postgres:latest
    container_name: proveedores_db
    volumes:
      - proveedores_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: proveedores
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: proveedores_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proveedores_net
volumes:
  ventas_data:
  inventario_data:
  logistica_data:
  proveedores_data:
networks:
  general:
  ventas_net:
  inventario_net:
  logistica_net:
  proveedores_net:
